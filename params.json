{"name":"SQLBuilder for PHP","tagline":"A powerful, fast, cross-platform SQL Builder for PHP. Convert your structured data into SQL queries with a fluent style interface targeting all the mainstream database (MySQL, PostgreSQL, SQLite)","body":"# SQLBuilder for PHP\r\n\r\n[![Build Status](https://secure.travis-ci.org/c9s/SQLBuilder.png)](http://travis-ci.org/c9s/SQLBuilder)\r\n\r\nIf you're looking for something that is not an ORM but can generate SQL for\r\nyou, you just found the right one.\r\n\r\nSQLBuilder is not an ORM (Object relational mapping) system, but a toolset that helps you generate \r\ncross-platform SQL queries in PHP.\r\n\r\nSQLBuilder is a stand-alone library, you can simply install it through composer\r\nor just require them (the class files) with your autoloader, and it has no\r\ndependencies.\r\n\r\n## Features\r\n\r\n* Simple API, easy to remember.\r\n* Fast & Powerful.\r\n* Custom parameter marker support:\r\n  * Question-mark parameter marker.\r\n  * Named parameter marker.\r\n* Configurable quote handler.\r\n* Zero dependency.\r\n\r\n## Synopsis\r\n\r\nHere is a short example of using Universal SelectQuery\r\n\r\n```php\r\nuse SQLBuilder\\Universal\\Query\\SelectQuery;\r\nuse SQLBuilder\\Driver\\MySQLDriver;\r\nuse SQLBuilder\\Driver\\PgSQLDriver;\r\nuse SQLBuilder\\Driver\\SQLiteDriver;\r\n\r\n$mysql = new MySQLDriver;\r\n$args = new ArgumentArray;\r\n\r\n$query = new SelectQuery;\r\n$query->select(array('id', 'name', 'phone', 'address','confirmed'))\r\n    ->from('users', 'u')\r\n    ->partitions('u1', 'u2', 'u3')\r\n    ->where()\r\n        ->is('confirmed', true)\r\n        ->in('id', [1,2,3])\r\n    ;\r\n$query\r\n    ->join('posts')\r\n        ->as('p')\r\n        ->on('p.user_id = u.id')\r\n    ;\r\n$query\r\n    ->orderBy('rand()')\r\n    ->orderBy('id', 'DESC')\r\n    ;\r\n\r\n$sql = $query->toSql($mysql, $args);\r\n\r\nvar_dump($sql);\r\nvar_dump($args);\r\n```\r\n\r\n\r\n## A More Detailed Description\r\n\r\nUnlike other SQL utilities, SQLBuilder let you define the quote style and the\r\nparameter marker type. there are 2 parameter marker type you can choose:\r\n\r\n1. Question mark parameter marker (`?`)\r\n2. Named parameter. (`:id`, `:name`, `:address`, `:p1`)\r\n\r\nThe above two are supported by PDO directly, and the first one is also\r\nsupported by `mysqli`, `pgsql` extension.\r\n\r\nThe API is *dead simple, easy to remember*, you can just define one query, then pass\r\ndifferent query driver to the query object to get a different SQL string for\r\nyour targettting platform.\r\n\r\nIt also supports cross-platform query generation, there are three types of\r\nquery (currently): **Universal**, **MySQL**, **PgSQL**.  The **Universal** queries are\r\ncross-platform, you can use them to create a cross-platform PHP API of \r\nyour database system, and the supported platforms are: **MySQL**, **PgSQL** and **SQLite**.\r\n\r\nUniversql Queries:\r\n\r\n- CreateDatabaseQuery\r\n- DropDatabaseQuery\r\n- SelectQuery\r\n- InsertQuery\r\n- UpdateQuery\r\n- DeleteQuery\r\n- UnionQuery\r\n- CreateIndexQuery\r\n- DropIndexQuery\r\n\r\nTo see the implementation details, you can check the source code inside **Universal** namespace:\r\n<https://github.com/c9s/SQLBuilder/tree/master/src/SQLBuilder/Universal/Query>\r\n\r\nMySQL Queries:\r\n\r\n- CreateUserQuery\r\n- DropUserQuery\r\n- GrantQuery\r\n- SetPasswordQuery\r\n\r\nFor MySQL platform, the implementation is according to the specification of MySQL 5.6.\r\n\r\nFor PostgreSQL platform, the implementation is according to the specification of PostgreSQL 9.2.\r\n\r\n\r\n## Installation\r\n\r\n### Install through Composer\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"corneltek/sqlbuilder\": \"2~\"\r\n    }\r\n}\r\n```\r\n\r\n## Getting Started\r\n\r\n[Documentation](https://github.com/c9s/SQLBuilder/wiki)\r\n\r\n## Development\r\n\r\n```\r\ncomposer install --dev --prefer-source\r\n```\r\n\r\nCopy the `phpunit.xml` file for your local configuration:\r\n\r\n```sh\r\nphpunit -c your-phpunit.xml tests\r\n```\r\n\r\n## Contribution\r\n\r\nTo test with mysql database:\r\n\r\n    $ mysql -uroot -p\r\n    create database sqlbuilder charset utf8;\r\n    grant all privileges on sqlbuilder.* to 'testing'@'localhost' identified by '';\r\n\r\n    --- or use this to remove password for testing account\r\n    SET PASSWORD FOR testing@localhost=PASSWORD('');\r\n\r\nTo test with pgsql database:\r\n\r\n    $ sudo -u postgres createdb sqlbuilder\r\n\r\n## Reference\r\n\r\n- http://dev.mysql.com/doc/refman/5.0/en/sql-syntax.html\r\n- http://www.postgresql.org/docs/8.2/static/sql-syntax.html\r\n- http://www.sqlite.org/optoverview.html\r\n\r\n## Author\r\n\r\nYo-An Lin (c9s) <cornelius.howl@gmail.com>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}