{"name":"SQLBuilder for PHP","tagline":"A powerful, fast, cross-platform SQL Builder for PHP. Convert your structured data into SQL queries with a fluent style interface targeting all the mainstream database (MySQL, PostgreSQL, SQLite)","body":"# SQLBuilder for PHP\r\n\r\n[![Build Status](https://secure.travis-ci.org/c9s/php-SQLBuilder.png)](http://travis-ci.org/c9s/php-SQLBuilder)\r\n\r\nSQLBuilder focuses on providing a simple syntax for building SQL statements.\r\n\r\nWhen switching database backend, you can simplely change the driver type of query\r\nbuilder, and it will generate the proper SQL for your backend, you don't have\r\nto modify the code to support different backend.\r\n\r\nFor example, pgsql support `returning` statement, this kind of syntax will only\r\nbe built when this feature is supported.\r\n\r\n## Features\r\n\r\n* Simple.\r\n* Fast & Powerful.\r\n* Ability to change SQL style, question-mark style, named-placeholder style.\r\n* Ability to change quote style, table name quoting, column name quoting..etc.\r\n* Configurable escaper and quoter.\r\n* No package dependency.\r\n\r\n## Installation\r\n\r\n### Install through PEAR\r\n\r\n```sh\r\n$ pear channel-discover pear.corneltek.com\r\n$ pear install corneltek/SQLBuilder\r\n```\r\n\r\n### Install through Composer\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"c9s/sqlbuilder\": \"*\"\r\n    }\r\n}\r\n```\r\n\r\n## Synopsis\r\n\r\n```php\r\n$driver = new Driver('mysql');\r\n\r\n$b = new SQLBuilder\\QueryBuilder($driver,'Member');\r\n$b->select('*');\r\n$b->where()\r\n    ->equal( 'a' , 'bar' );\r\n$sql = $b->build();\r\n\r\n// SELECT * FROM Member where a = 'bar'\r\n```\r\n\r\n## Driver\r\n\r\nGet your SQL driver\r\n\r\n```php\r\n$driver = new SQLBuilder\\Driver('pgsql');\r\n$driver = SQLBuilder\\Driver::getInstance();\r\n$driver = SQLBuilder\\Driver::create('pgsql');\r\n```\r\n\r\n### Configuring Driver Quoter\r\n\r\nstring quote/escape handler:\r\n\r\n```php\r\n$driver->configure('escape',array($pg,'escape'));\r\n$driver->configure('quoter',array($pdo,'quote'));\r\n\r\n$driver->escaper = 'addslashes';\r\n\r\n$driver->quoter = function($string) {\r\n    return '\\'' . $string . '\\'';\r\n};\r\n```\r\n\r\n### Configuring Database Driver For pgsql\r\n\r\n```php\r\n$driver->configure('driver','pgsql');\r\n```\r\n\r\nTrim spaces for SQL ? \r\n\r\n```php\r\n$driver->configure('trim',true);\r\n```\r\n\r\n### Changing Placeholder Style\r\n\r\nSQLBuilder supports two placeholder styles:\r\n\r\n- named parameter by PDO\r\n- question-mark paramter by mysql, PDO.\r\n\r\n#### Named Placeholder:\r\n\r\n```php\r\n$driver->configure('placeholder','named');\r\n```\r\n\r\nThis generates SQL with named-parameter for PDO:\r\n\r\n```\r\nINSERT INTO table (foo ,bar ) values (:foo, :bar);\r\n```\r\n\r\n#### Question-mark Placeholder\r\n\r\nIf you pass variables to build SQL with named parameters, query\r\nbuilder converts named parameters for you, to get variables, you\r\ncan use `getVars` method:\r\n\r\n```php\r\n$vars = $sb->getVars();\r\n```\r\n\r\nWhich returns:\r\n\r\n```php\r\narray(\r\n    ':name' => 'Foo',\r\n    ':phone' => 'Bar',\r\n);\r\n```\r\n\r\nOr to use question-mark style:\r\n\r\n```php\r\n$driver->configure('placeholder',true);\r\n```\r\n\r\nThis generates:\r\n\r\n```sql\r\nINSERT INTO table (foo ,bar ) values (?,?);\r\n```\r\n\r\n## Query SQL Generation\r\n\r\n### Select\r\n\r\nBuild SQL query for table 'Member':\r\n\r\n```php\r\n$builder = new SQLBuilder\\QueryBuilder($driver);\r\n$builder->table('Member');\r\n$builder->select('*','column1','column2');\r\n$builder->select(array( \r\n    'column1' => 'as1',\r\n    'column2' => 'as2',\r\n));\r\n```\r\n\r\nBuild Select SQL\r\n\r\n```php\r\n$sql = $builder->table('Member')->select('*')\r\n    ->where()\r\n        ->equal( 'a' , 'bar' )   // a = 'bar'\r\n        ->notEqual( 'a' , 'bar' )   // a != 'bar'\r\n        ->is( 'a' , 'null' )       // a is null\r\n        ->isNot( 'a' , 'null' )    // a is not equal\r\n        ->greater( 'a' , '2011-01-01' );\r\n        ->in( 'a', array(1,2,3,4,5) )\r\n        ->greater( 'a' , array('date(2011-01-01)') );  // do not escape\r\n            ->or()->less( 'a' , 123 )\r\n            ->and()->like( 'content' , '%content%' );\r\n        ->group()                  // AND ( a = 123 AND b != 123 )\r\n            ->is( 'a' , 123 )\r\n            ->isNot( 'b', 123 )             \r\n        ->ungroup()\r\n        ->back()                  // back to sql builder\r\n        ->build();\r\n```\r\n\r\nThe `where()` returns `SQLBuilder\\Expression` object.\r\n\r\n`Condition->back()` returns QueryBuilder object\r\n\r\n### Limit And Offset\r\n\r\n```php\r\n$builder->select('*')->table('items')\r\n    ->groupBy('name')\r\n    ->limit(10)->offset(100);\r\n?>\r\n```\r\n\r\nFor PostgreSQL, which generates:\r\n\r\n```sql\r\nSELECT * FROM items OFFSET 100 LIMIT 10;\r\n```\r\n\r\nFor MySql, which generates:\r\n\r\n```sql\r\nSELECT * FROM items LIMIT 100,10;\r\n```\r\n\r\n### Between\r\n\r\n```php\r\n$query->select('*')->table('items')\r\n    ->where()\r\n    ->between('created_on', '2011-01-01' , '2011-02-01' );\r\n```\r\n\r\n```sql\r\nSELECT * FROM items WHERE created_on BETWEEN '2011-01-01' AND '2011-02-01'\r\n```\r\n\r\n### In\r\n\r\n```php\r\n$query->select('*')->table('items')\r\n    ->where()\r\n    ->in('a', array(1,2,3,4));\r\n```\r\n\r\n```sql\r\nSELECT * FROM items WHERE a IN (1,2,3,4);\r\n```\r\n\r\n```php\r\n$query->select('*')->table('City')\r\n    ->where()\r\n    ->in('name', array('Taipei','France','Japan'));\r\n```\r\n\r\n```sql\r\nSELECT * FROM City WHERE name IN ('Taipei','France','Japan');\r\n```\r\n\r\n### Insert\r\n\r\nInsertion:\r\n\r\n```php\r\n$builder->insert(array(\r\n    // placeholder => 'value'\r\n    'foo' => 'foo',\r\n    'bar' => 'bar',\r\n));\r\n```\r\n\r\nFor question-mark style SQL, you might need this:\r\n\r\n```php\r\n$builder->insert(array(\r\n    'foo',\r\n    'bar',\r\n));\r\n```\r\n\r\nThe last thing, build the SQL statement:\r\n\r\n```php\r\n$sql = $builder->build();\r\n```\r\n\r\n### Update\r\n\r\n```php\r\n$driver = new Driver;\r\n$driver->configure('driver','mysql');\r\n$driver->configure('placeholder','named');\r\n\r\n$sb = new QueryBuilder('member',$driver);\r\n$sb->update( array( 'set1' => 'value1') );\r\n$sb->whereFromArgs(array( \r\n    'cond1' => ':blah',       // is equal to    where()->equal('cond1',':blah')\r\n));\r\n$sql = $sb->build();   // UPDATE member SET set1 = 'value1' WHERE cond1 = :cond1\r\n```\r\n\r\n\r\n### Join\r\n\r\n```php\r\n$sb = new QueryBuilder($driver,'Member');\r\n$sb->alias('m')\r\n    ->join('table_name')\r\n        ->alias('t')\r\n        ->on()->equal( 't.zzz', array('m.ccc') )        // not to escape string (with array())\r\n        ->back()                                        // return to join expression object\r\n        ->on()->equal( 'a.foo', 'string' )              // treat as string, escape string\r\n        ->back()          // go back to SqlBuilder object.\r\n        ->toSql();\r\n```\r\n\r\n### Delete\r\n\r\n```php\r\n$driver = new Driver;\r\n$driver->configure('driver','mysql');\r\n$driver->configure('trim',true);\r\n$sb = new QueryBuilder($driver,'member');\r\n$sb->delete();\r\n$sb->whereFromArgs(array( 'foo' => '123' ));\r\n\r\n$sb->where()->equal('foo',123);\r\n\r\n$sql = $sb->build();  // DELETE FROM member WHERE foo = 123\r\n```\r\n\r\n## Index Builder\r\n\r\nTo generate something like:\r\n\r\n\r\n```sql\r\nCREATE INDEX CONCURRENTLY on tags (name text_pattern_ops) WHERE media_count >= 100\r\n```\r\n\r\nSimply do this:\r\n\r\n```php\r\n$b = new IndexBuilder($driver);\r\n\r\n$b->create('index_name')\r\n    ->on( 'table_name' )\r\n    ->concurrently()\r\n    ->columns('foo','bar',array('name','text_pattern_ops'))\r\n    ->where()\r\n        ->greater('media_count', 500)\r\n    ;\r\n```\r\n\r\n## Migration Builder\r\n\r\n```php\r\n$builder = new SQLBuilder\\MigrationBuilder( $driver );\r\n$sql = $builder->addColumn( 'members' , \r\n    SQLBuilder\\Column::create('price')\r\n        ->integer()\r\n        ->notNull()\r\n        ->default(100)\r\n);\r\n// ALTER TABLE members ADD COLUMN price integer DEFAULT 100 NOT NULL\r\n\r\n$sql = $builder->addColumn( 'members' , \r\n    SQLBuilder\\Column::create('email')\r\n        ->varchar(64)\r\n);\r\n// ALTER TABLE members ADD COLUMN email varchar(64)\r\n\r\n$sql = $builder->createIndex( 'members', 'email_index', 'email' ); // create index email_index on members (email);\r\n\r\n$sql = $builder->dropIndex( 'members', 'email_index' );\r\n```\r\n\r\n## Development\r\n\r\n`PHPUnit_TestMore` is needed.\r\n\r\n```sh\r\n$ pear channel-discover pear.corneltek.com\r\n$ pear install corneltek/PHPUnit_TestMore\r\n```\r\n\r\nInstall Universal package for the classloader:\r\n\r\n```sh\r\ncurl -s http://install.onionphp.org/ | sh\r\nonion -d install\r\n```\r\n\r\nCopy the `phpunit.xml` file for your local configuration:\r\n\r\n```sh\r\nphpunit -c your-phpunit.xml tests\r\n```\r\n\r\n## Contribution\r\n\r\nTo test with mysql database:\r\n\r\n    $ mysql -uroot -p\r\n    create database sqlbuilder charset utf8;\r\n    grant all privileges on sqlbuilder.* to 'testing'@'localhost' identified by '';\r\n\r\n    --- or use this to remove password for testing account\r\n    SET PASSWORD FOR testing@localhost=PASSWORD('');\r\n\r\nTo test with pgsql database:\r\n\r\n    $ sudo -u postgres createdb sqlbuilder\r\n\r\n## Reference\r\n\r\n- http://dev.mysql.com/doc/refman/5.0/en/sql-syntax.html\r\n- http://www.postgresql.org/docs/8.2/static/sql-syntax.html\r\n- http://www.sqlite.org/optoverview.html\r\n\r\n## Author\r\n\r\nYo-An Lin (c9s) <cornelius.howl@gmail.com>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}